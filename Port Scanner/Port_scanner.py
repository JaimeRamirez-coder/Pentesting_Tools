#! /usr/bin/python3
# coding=utf-8

"""
Tool designed to scan ports using Nmap.
"""
# Import librarys
import os
from datetime import datetime

# import nmap library
try:
    import nmap
except ModuleNotFoundError:
    print("Nmap library not found, install it using 'pip install python-nmap'")
    exit()

# import nmap3 library
try:
    import nmap3
except ModuleNotFoundError:
    print("Nmap library not found, install it using 'pip install python3-nmap'")
    exit()

nmap = nmap.PortScanner()
nmap3 = nmap3.NmapScanTechniques()


def main():
    """
    Main function that uses escaner_nmap_tipo1 and escaner_nmap3_tipo2 functions to scan ports
    """
    print("\033[1;33m          ____            _     ____                                  _ _ \n \
        |  _ \\ ___  _ __| |_  / ___|  ___ __ _ _ __  _ __   ___ _ __| | |\n \
        | |_) / _ \\| '__| __| \\___ \\ / __/ _` | '_ \\| '_ \\ / _ \\ '__| | |\n \
        |  __/ (_) | |  | |_   ___) | (_| (_| | | | | | | |  __/ |  |_|_|\n \
        |_|   \\___/|_|   \\__| |____/ \\___\\__,_|_| |_|_| |_|\\___|_|  (_|_)\n \
        \033[1;31mJaime Patricio Ramirez Ramirez                                        \n")

    root = 0

    if os.geteuid() == 0:
        print("\033[0;0mYou are running Port Scanner as \033[1;31mroot\033[0;0m \n")
        root = 1
    else:
        print("\033[0;0mYou are running Port Scanner as normal user \n")

    hosts = input("Enter the host or network range to scann ('192.168.0.26', '172.25.0.1/24'): ")
    ports = input("Enter the port/ports to scann ('22','22,80,443', '22-443'): ")

    while True:
        print("\n\033[1;33mChoose the scan technique")
        print("\n\033[1;35m1)\tTCP connect scan\033[0;0m")
        print("\033[1;35m2)\tTCP SYN scan \033[0;0m(\033[1;31mroot\033[0;0m)")
        print("\033[1;35m3)\tUDP scan \033[0;0m(\033[1;31mroot\033[0;0m)")
        print("\033[1;35m4)\tFIN scan \033[0;0m(\033[1;31mroot\033[0;0m)")
        print("\033[1;35m5)\tTCP Xmas scan \033[0;0m(\033[1;31mroot\033[0;0m)")
        print("\033[1;35m6)\tTCP ACK scan \033[0;0m(\033[1;31mroot\033[0;0m)")
        print("\033[1;35mQ)\tExit\033[0;0m")
        choice = input("\nTipe your choice (1): \033[0;0m")
        if root == 0 and choice in ["2","3","4","5","6"]:
            print("\n\033[1;31mYou don't have enough permissions to \
excecute this scan technique\033[0;0m \n")
        else:
            if choice == "1":
                escaner_nmap_tipo1("tcp_connect",hosts,ports)
            elif choice == "2":
                escaner_nmap3_tipo2("tcp_syn",hosts,ports)
            elif choice == "3":
                escaner_nmap3_tipo2("udp",hosts,ports)
            elif choice == "4":
                escaner_nmap3_tipo2("fin",hosts,ports)
            elif choice == "5":
                escaner_nmap_tipo1("tcp_xmas",hosts,ports)
            elif choice == "6":
                escaner_nmap_tipo1("tcp_ack",hosts,ports)
            elif choice in ('Q','q'):
                print("\033[1;31m\n#HappyHacking\033[0;0m")
                break
            else:
                print("\nEnter a valid choice from 1-6 or Q\n")


def escaner_nmap_tipo1(scan,host,port):
    """
    Scann ports using python-nmap library
    """
    def tcp_connect(hosts,ports):
        """
        Scann ports using TCP connect technique.
        """
        print("\n======================== TCP CONNECT SCAN ========================\n")
        argumentos = ("-n -sT -sV -p "+ports)
        nmap.scan(hosts=hosts, arguments=argumentos)
        print("Command executed \033[1;37m" + nmap.command_line() +"\033[0;0m")
        for host in nmap.all_hosts():
            print("\n----------------------------------------------------")
            print("Host: " + host)
            print("State: "+ nmap[host].state())
            print("---------")
            port = nmap[host]["tcp"].keys()
            port = list(port)
            port.sort()
            for portx in port:
                print("port: " + str(portx) +"\tstate: "+nmap[host]["tcp"][portx]['state'])
        print("\n==================================================================\n")
        save_csv_nmap()

    def tcp_xmas(hosts,ports):
        """
        Scann ports using TCP Xmas technique.
        """
        print("\n========================= TCP Xmas SCAN =========================\n")
        argumentos = ("-n -sX -p "+ports)
        nmap.scan(hosts=hosts, arguments=argumentos)
        print("Command executed \033[1;37m" + nmap.command_line() +"\033[0;0m")
        for host in nmap.all_hosts():
            print("\n----------------------------------------------------")
            print("Host: " + host)
            print("State: "+ nmap[host].state())
            print("---------")
            port = nmap[host]["tcp"].keys()
            port = list(port)
            port.sort()
            for portx in port:
                print("port: " + str(portx) +"\tstate: "+nmap[host]["tcp"][portx]['state'])
        print("\n==================================================================\n")
        save_csv_nmap()

    def tcp_ack(hosts,ports):
        """
        Scann ports using TCP ACK technique.
        """
        print("\n========================= TCP ACK SCAN ==========================\n")
        argumentos = ("-n -sA -p "+ports)
        nmap.scan(hosts=hosts, arguments=argumentos)
        print("Command executed \033[1;37m" + nmap.command_line() +"\033[0;0m")
        for host in nmap.all_hosts():
            print("\n----------------------------------------------------")
            print("Host: " + host)
            print("State: "+ nmap[host].state())
            print("---------")
            port = nmap[host]["tcp"].keys()
            port = list(port)
            port.sort()
            for portx in port:
                print("port: " + str(portx) +"\tstate: "+nmap[host]["tcp"][portx]['state'])
        print("\n==================================================================\n")
        save_csv_nmap()

    if scan == "tcp_connect":
        tcp_connect(host,port)
    elif scan == "tcp_ack":
        tcp_ack(host,port)
    elif scan == "tcp_xmas":
        tcp_xmas(host,port)

def save_csv_nmap():
    """
    Save csv report.
    """
    ans = input("Do you want to save report as csv file? (Y/n): ")
    while ans not in ("y","Y","n","N"):
        print("\nNot a valid option")
        ans = input("Do you want to save report as csv file? (Y/n): ")
    if ans in ('y', 'Y'):
        name = "report "+ str(datetime.now())
        name_user = input("Enter the name to the report ("+ name +"): ")
        if len(name_user) != 0:
            name = name_user
        path = os.getcwd()
        path_user = input("Enter the path to save the file (" + path+"): ")
        if len(path_user) != 0:
            path = path_user
        try:
            with open(path+"/"+name+".csv", 'w',encoding="utf-8") as output:
                output.write(nmap.csv())
                print("\033[1;37mFile saved \033[0;0m \n")
        except PermissionError:
            print("\033[1;31mYou don't have enough permissions to save\
in this path\033[0;0m \n")

def escaner_nmap3_tipo2(scan,host,port):
    """
    Scann ports using python3-nmap library
    """
    def fin(hosts,ports):
        """
        Scann ports using FIN technique.
        """
        print("\n============================ FIN SCAN ============================\n")
        argumentos = ("-n -p"+ports)
        result = nmap3.nmap_fin_scan(target=hosts, args=argumentos)
        # print(json.dumps(result, indent = 4)) #uncomment this line to print results structure
        print("Command executed \033[1;37m" + result["stats"]["args"] +"\033[0;0m")
        for host in result.items():
            if host[0] not in ("stats","runtime"):
                print("\n----------------------------------------------------")
                print("Host: " + host[0])
                print("State: "+ host[1]["state"]["state"])
                print("---------")
                for port in host[1]["ports"]:
                    print("port: " + port["portid"]+"\tstate: "+port['state'])
        print("\n==================================================================\n")
        save_csv_nmap3(result)

    def udp(hosts,ports):
        """
        Scann ports using UDP technique.
        """
        print("\n============================ UDP SCAN =============================\n")
        argumentos = ("-n -p "+ports)
        result = nmap3.nmap_udp_scan(target=hosts,args=argumentos)
        #print(json.dumps(result, indent = 4)) #uncomment this line to print results structure
        print("Command executed \033[1;37m" + result["stats"]["args"] +"\033[0;0m")
        for host in result.items():
            if host[0] not in ("stats","runtime"):
                print("\n----------------------------------------------------")
                print("Host: " + host[0])
                print("State: "+ host[1]["state"]["state"])
                print("---------")
                for port in host[1]["ports"]:
                    print("port: " + port["portid"]+"\tstate: "+port['state'])
        print("\n==================================================================\n")
        save_csv_nmap3(result)

    def tcp_syn(hosts,ports):
        """
        Scann ports using TCP SYN technique.
        """
        print("\n=========================== TCP SYN SCAN ===========================\n")
        argumentos = ("-n -p"+ports)
        result = nmap3.nmap_syn_scan(target=hosts,args=argumentos)
        print("Command executed \033[1;37m" + result["stats"]["args"] +"\033[0;0m")
        for host in result.items():
            if host[0] not in ("stats","runtime"):
                print("\n----------------------------------------------------")
                print("Host: " + host[0])
                print("State: "+ host[1]["state"]["state"])
                print("---------")
                for port in host[1]["ports"]:
                    print("port: " + port["portid"]+"\tstate: "+port['state'])
        print("\n==================================================================\n")
        save_csv_nmap3(result)

    if scan == "fin":
        fin(host,port)
    elif scan == "udp":
        udp(host,port)
    elif scan == "tcp_syn":
        tcp_syn(host,port)

def save_csv_nmap3(result):
    """
    Save csv report.
    """
    ans = input("Do you want to save report as csv file? (Y/n): ")
    while ans not in ("y","Y","n","N"):
        print("\nNot a valid option")
        ans = input("Do you want to save report as csv file? (Y/n): ")
    if ans in ('y', 'Y'):
        name = "report "+ str(datetime.now())
        name_user = input("Enter the name to the report ("+ name +"): ")
        if len(name_user) != 0:
            name = name_user
        path = os.getcwd()
        path_user = input("Enter the path to save the file (" + path+"): ")
        if len(path_user) != 0:
            path = path_user
        try:
            with open(path+"/"+name+".csv", 'w',encoding="utf-8") as output:
                output.write("host"+";"+"protocol"+";"+"port"+";"+"name"+";" \
                    +"state"+";"+"reason"+";"+"conf\n")
                for host in result.keys():
                    if host not in ("stats","runtime"):
                        for port in result[host]["ports"]:
                            output.write(host+";"+port["protocol"]+";"+port["portid"] \
                                +";"+port["service"]["name"]+";"+port["state"]+";"\
                                    +port["reason"]+";"+port["service"]["conf"]+"\n")
                print("\033[1;37mFile saved \033[0;0m \n")
        except PermissionError:
            print("\033[1;31mYou don't have enough permissions \
to save in this path\033[0;0m \n")

if __name__ == "__main__":
    main()
